import logging
from aiogram import Bot, Dispatcher, types, Router
from aiogram.enums import ParseMode
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram import F
import aiohttp
import asyncio

from app.config import BOT_TOKEN, API_SECRET_TOKEN, API_URL, ADMIN_IDS

# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤
bot = Bot(token=BOT_TOKEN, default=types.DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())
router = Router()

# FSM
class Form(StatesGroup):
    waiting_for_action = State()
    waiting_for_email = State()
    waiting_for_delete_email = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
start_keyboard = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="üÜì –ü—Ä–æ–±–Ω—ã–π –∫–ª—é—á")],
    [KeyboardButton(text="üí≥ –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É")],
], resize_keyboard=True)

admin_keyboard = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="üìã –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")],
    [KeyboardButton(text="‚ûï –í—ã–¥–∞—Ç—å –∫–ª—é—á")],
    [KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á")],
], resize_keyboard=True)

# /start
@router.message(F.text == "/start")
async def start_handler(message: types.Message, state: FSMContext):
    if message.from_user.id in ADMIN_IDS:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=admin_keyboard)
    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?", reply_markup=start_keyboard)
        await state.set_state(Form.waiting_for_action)

# –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è
@router.message(Form.waiting_for_action)
async def user_choice(message: types.Message, state: FSMContext):
    if message.text in ["üÜì –ü—Ä–æ–±–Ω—ã–π –∫–ª—é—á", "üí≥ –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É"]:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")
        await state.set_state(Form.waiting_for_email)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é.")

# –≤–≤–æ–¥ email –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–∞
@router.message(Form.waiting_for_email)
async def email_input(message: types.Message, state: FSMContext):
    email = message.text.strip()
    await state.clear()
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{API_URL}", params={"email": email, "token": API_SECRET_TOKEN}) as r:
            if r.status == 200:
                json_data = await r.json()
                await message.answer(f"‚úÖ –í–∞—à –∫–ª—é—á:\n<code>{json_data['link']}</code>")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª—é—á–∞. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

# admin: –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
@router.message(F.text == "üìã –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
async def list_keys(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{API_URL.replace('/add-user', '/all-users')}", params={"token": API_SECRET_TOKEN}) as r:
            if r.status == 200:
                users = await r.json()
                if users:
                    text = "\n".join([f"- {u['email']}" for u in users])
                    await message.answer(f"üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n{text}")
                else:
                    await message.answer("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç")
            else:
                await message.answer("–û—à–∏–±–∫–∞ API")

# admin: –≤—Ä—É—á–Ω—É—é –≤—ã–¥–∞—Ç—å
@router.message(F.text == "‚ûï –í—ã–¥–∞—Ç—å –∫–ª—é—á")
async def manual_add(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ email –¥–ª—è –≤—ã–¥–∞—á–∏:")
    await state.set_state(Form.waiting_for_email)

# admin: —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á
@router.message(F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á")
async def delete_key_prompt(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        return
    await message.answer("–í–≤–µ–¥–∏ email, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:")
    await state.set_state(Form.waiting_for_delete_email)

@router.message(Form.waiting_for_delete_email)
async def delete_key_action(message: types.Message, state: FSMContext):
    email = message.text.strip()
    await state.clear()
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{API_URL.replace('/add-user', '/delete-user')}", params={"email": email, "token": API_SECRET_TOKEN}) as r:
            if r.status == 200:
                data = await r.json()
                if data.get("success"):
                    await message.answer("‚úÖ –ö–ª—é—á —É–¥–∞–ª—ë–Ω.")
                else:
                    await message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            else:
                await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.")

# fallback
@router.message()
async def fallback(message: types.Message):
    await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π /start")

# –∑–∞–ø—É—Å–∫
async def main():
    logging.basicConfig(level=logging.INFO)
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram import F
import aiohttp
import asyncio
import os
from app import BOT_TOKEN, API_SECRET_TOKEN, API_URL, ADMIN_IDS

bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

class Form(StatesGroup):
    waiting_for_action = State()
    waiting_for_email = State()

start_keyboard = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="üÜì –ü—Ä–æ–±–Ω—ã–π –∫–ª—é—á")],
    [KeyboardButton(text="üí≥ –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É")],
], resize_keyboard=True)

admin_keyboard = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="üìã –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")],
    [KeyboardButton(text="‚ûï –í—ã–¥–∞—Ç—å –∫–ª—é—á")],
    [KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á")],
], resize_keyboard=True)

@dp.message(F.text == "/start")
async def start_handler(message: types.Message, state: FSMContext):
    if message.from_user.id in ADMIN_IDS:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=admin_keyboard)
    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?", reply_markup=start_keyboard)
        await state.set_state(Form.waiting_for_action)

@dp.message(Form.waiting_for_action)
async def user_choice(message: types.Message, state: FSMContext):
    if message.text == "üÜì –ü—Ä–æ–±–Ω—ã–π –∫–ª—é—á" or message.text == "üí≥ –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")
        await state.set_state(Form.waiting_for_email)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é.")

@dp.message(Form.waiting_for_email)
async def email_input(message: types.Message, state: FSMContext):
    email = message.text.strip()
    await state.clear()
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{API_URL}/add-user", params={"email": email, "token": API_SECRET_TOKEN}) as r:
            if r.status == 200:
                json_data = await r.json()
                await message.answer(f"‚úÖ –í–∞—à –∫–ª—é—á:\n<code>{json_data['link']}</code>")
            else:
                await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª—é—á–∞. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

@dp.message(F.text == "üìã –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
async def list_keys(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{API_URL}/all-users", params={"token": API_SECRET_TOKEN}) as r:
            if r.status == 200:
                users = await r.json()
                if users:
                    text = "\n".join([f"- {u['email']}" for u in users])
                    await message.answer(f"üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n{text}")
                else:
                    await message.answer("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç")
            else:
                await message.answer("–û—à–∏–±–∫–∞ API")

@dp.message(F.text == "‚ûï –í—ã–¥–∞—Ç—å –∫–ª—é—á")
async def manual_add(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ email –¥–ª—è –≤—ã–¥–∞—á–∏:")
    await state.set_state(Form.waiting_for_email)

@dp.message(F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á")
async def delete_key(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    await message.answer("–í–≤–µ–¥–∏ email, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:")
    await dp.fsm.set_state(message.from_user.id, Form.waiting_for_email.state)

@dp.message()
async def fallback(message: types.Message):
    await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π /start")

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    import asyncio
    from aiogram import executor

    asyncio.run(dp.start_polling(bot))
